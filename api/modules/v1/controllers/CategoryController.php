<?php

namespace api\modules\v1\controllers;

use api\modules\v1\models\Category;
use Yii;
use yii\data\ActiveDataProvider;
use yii\filters\ContentNegotiator;
use yii\rest\ActiveController;
use yii\web\HttpException;
use yii\web\Response;

/**
 * Country Controller API
 *
 * @author Dennis Tran <dennis@enclave.vn>
 */
class CategoryController extends ActiveController {

    public function init() {
        parent::init();
        Yii::$app->user->enableSession = false;
    }

    public $modelClass = 'api\modules\v1\models\Category';
    public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'items',
    ];

//    public function behaviors() {
//        $behaviors = parent::behaviors();
//        $behaviors['authenticator'] = [
//            'class' => HttpBasicAuth::className(),
//        ];
//        return $behaviors;
//    }
    public function behaviors() {
        $behaviors = parent::behaviors();
        $behaviors['rateLimiter']['enableRateLimitHeaders'] = false;

        $behaviors['bootstrap'] = [
            'class' => ContentNegotiator::className(),
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];

        return $behaviors;
    }

    /*
     * CUSTOMIZE RESTFUL API
     * Create custom actions for practice
     *
     */
    /* This funcion is used to override the actionCreate/actionView/... */

    public function actions() {
        $actions = parent::actions();

        // will overriding return data on the index action
        //$actions['index']['prepareDataProvider'] = [new Category(), 'getAllCategories'];
        
        // Way 2: How to do custom search items using the built in Search Class generated by Gii which is 
        // already performing validation and using 'like' (still OK for use)
        // API: http://localhost/yii2-advanced-api/api/web/v1/categories?CategorySearch[name]=Shoes
        $actions['index']['prepareDataProvider'] = [new Category(), 'prepareDataProvider'];

        // will overriding return data on the view action 
        unset($actions['view']);
        return $actions;
    }

    public function verbs() {

        $verbs = [
            'search' => ['GET']
        ];
        return array_merge(parent::verbs(), $verbs);
    }

    public function actionView($id) {

        if (isset($id)) {
            return Category::findOne($id);
        } else {
            throw new HttpException(404);
        }
    }

    /*
     * Way 1: How to do custom search items in Category table (basic way)
     * API: http://localhost/yii2-advanced-api/api/web/v1/categories/search?name=Shoes
     */

    public function actionSearch() {
        //return Yii::$app->request->get('name');
        $keyword = Yii::$app->request->get(); // strongly recommended used more than $_GET function;
        if (!empty($keyword)) {
            $model = new $this->modelClass;
            foreach ($keyword as $key => $value) {
                if (!$model->hasAttribute($key)) {
                    throw new HttpException(404, 'Invalid attribute:' . $key);
                }
            }
            try {
                $provider = new ActiveDataProvider([
                    'query' => $model->find()->where($keyword),
                    'pagination' => false
                ]);
            } catch (Exception $ex) {
                throw new HttpException(500, 'Internal server error');
            }

            if ($provider->getCount() <= 0) {
                throw new HttpException(404, 'No entries found with this query string');
            } else {
                return $provider;
            }
        } else {
            throw new HttpException(400, 'There are no query string');
        }
    }

}
